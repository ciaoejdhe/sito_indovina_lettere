# Importiamo le librerie necessarie: Flask per il sito, le altre per il modello
from flask import Flask, render_template, request
import numpy as np
from sklearn.neighbors import KNeighborsClassifier

# 1. CREIAMO L'APPLICAZIONE FLASK
app = Flask(__name__)

# 2. CARICHIAMO E ADDESTRIAMO IL MODELLO (una sola volta, all'avvio)
# NOTA: questo codice viene eseguito solo quando avvii il server.
# === INIZIO NUOVO DATASET ===
dataset = [
    (0,0,1,0,0,2,3,0,1,2,2,1,2,0,0,2,'A'), (0,1,1,0,0,2,2,0,0,3,3,0,0,1,1,0,'A'),
    (0,2,0,0,0,3,0,0,1,3,1,0,1,0,1,0,'A'), (1,0,0,0,3,1,0,0,2,2,0,0,0,0,0,0,'A'),
    (0,1,0,0,0,2,3,0,1,2,1,0,0,0,0,0,'A'), (0,1,2,0,0,3,3,0,0,2,2,0,1,1,0,0,'A'),
    (0,0,0,0,0,1,1,0,1,2,2,0,1,1,1,1,'A'), (0,1,2,0,0,3,3,1,1,2,0,3,1,1,0,1,'A'),
    (0,3,3,0,3,0,0,3,3,3,3,3,3,0,0,3,'A'), (1,2,2,0,2,0,0,2,2,3,3,2,2,0,0,2,'A'),
    (0,2,3,1,3,1,1,3,3,3,3,3,3,0,0,3,'A'), (0,1,3,1,3,0,0,2,3,3,3,3,3,0,0,3,'A'),
    (1,3,3,1,3,0,0,3,3,2,2,3,3,0,0,3,'A'), (0,2,1,0,0,3,3,0,0,2,3,0,1,0,2,0,'A'),
    (0,2,1,0,1,1,2,0,2,2,3,0,1,0,0,0,'A'), (0,1,0,0,0,3,2,0,0,2,2,0,0,1,1,0,'A'),
    (0,2,0,0,0,2,1,0,2,2,2,0,1,0,1,2,'A'), (0,2,2,0,0,3,3,0,2,1,1,1,1,0,0,0,'A'),
    (0,2,2,0,2,1,1,1,3,2,2,2,2,0,1,1,'A'), (0,1,2,0,0,3,3,1,1,3,2,2,1,1,0,2,'A'),
    (0,0,0,0,0,1,2,0,0,2,2,0,0,1,1,0,'A'), (1,2,2,0,2,0,0,2,2,2,2,2,2,0,0,2,'A'),
    (0,3,0,0,0,3,2,0,3,3,3,0,2,0,2,2,'A'), (0,2,0,0,0,2,3,0,1,2,1,0,0,0,0,0,'A'),
    (2,2,2,0,2,0,0,2,2,3,3,2,2,0,0,2,'A'), (3,3,2,0,3,0,0,3,3,3,2,0,3,0,0,3,'B'),
    (3,3,3,1,3,1,1,3,3,3,3,1,3,1,1,3,'B'), (2,2,1,0,3,0,1,2,3,2,1,0,3,0,1,2,'B'),
    (3,3,3,0,3,0,3,0,3,3,3,0,3,0,3,0,'B'), (3,2,2,0,3,0,0,3,3,2,2,0,3,0,0,3,'B'),
    (0,0,0,0,1,2,1,0,1,2,2,0,0,2,1,0,'B'), (0,0,0,0,1,2,2,0,0,3,2,1,0,1,1,0,'B'),
    (0,0,0,0,0,2,1,0,0,3,2,0,0,2,2,0,'B'), (0,1,0,0,0,2,0,0,0,3,2,0,0,2,1,0,'B'),
    (0,0,0,0,0,2,0,0,0,3,2,0,0,1,1,0,'B'), (1,1,0,0,1,3,1,0,1,2,2,0,0,2,1,0,'B'),
    (0,0,0,0,1,2,0,0,0,3,1,0,0,2,0,0,'B'), (0,0,0,0,1,3,1,0,1,2,2,0,0,2,1,0,'B'),
    (3,3,2,0,3,0,0,2,3,3,2,0,3,0,0,2,'B'), (0,0,0,0,0,2,1,0,0,3,2,0,0,2,2,0,'B'),
    (3,3,3,1,3,2,1,3,3,3,2,1,3,1,1,2,'B'), (3,3,3,0,3,0,3,0,3,3,3,0,3,0,3,0,'B'),
    (3,2,2,0,3,0,0,3,3,2,2,0,3,0,0,3,'B'), (0,0,0,0,1,2,1,0,1,2,2,0,0,2,1,0,'B'),
    (0,1,1,0,1,3,1,0,2,3,1,0,0,2,1,0,'C'), (0,1,1,0,1,3,0,0,2,1,0,0,0,2,1,0,'C'),
    (0,0,0,0,1,2,0,0,2,2,2,0,0,1,0,0,'C'), (0,1,0,0,2,1,0,0,2,2,2,0,0,1,1,0,'C'),
    (0,0,0,0,2,2,1,0,2,2,1,0,0,0,0,0,'C'), (0,0,1,0,0,1,2,0,0,2,2,0,0,0,0,0,'C'),
    (0,2,2,0,0,2,0,0,0,2,1,0,0,2,2,0,'C'), (0,0,0,0,0,2,1,0,0,2,2,0,0,0,0,0,'C'),
    (2,1,0,0,2,0,0,0,1,2,0,0,0,0,0,0,'C'), (0,0,0,0,0,2,1,0,0,2,1,0,1,1,2,0,'C'),
    (0,0,0,0,0,2,1,0,1,3,1,0,0,1,1,0,'C'), (0,1,2,0,2,3,2,0,3,2,0,0,2,2,2,0,'C'),
    (0,0,0,0,1,3,2,0,1,3,0,0,0,2,2,0,'C'), (2,2,1,0,2,0,0,0,2,2,1,0,0,0,0,0,'C'),
    (0,1,1,0,2,3,1,0,2,1,0,0,1,2,2,0,'C'), (0,0,0,0,0,2,2,0,0,2,1,1,0,1,2,1,'C'),
    (0,0,0,0,0,1,2,1,0,2,0,0,0,2,2,0,'C'), (0,0,0,0,0,2,2,0,0,2,0,0,1,2,2,0,'C'),
    (0,1,1,0,1,3,2,0,2,3,2,1,1,2,2,1,'C'), (0,0,0,0,0,0,2,1,0,3,2,1,0,1,3,0,'C'),
    (1,1,1,0,2,2,0,0,3,0,0,0,2,2,1,0,'C'), (0,0,1,2,0,0,3,2,0,1,3,0,0,0,2,2,'C'),
    (0,1,0,0,2,1,0,0,2,1,1,0,1,2,1,0,'C'), (0,0,1,0,0,2,2,0,0,3,1,0,0,1,1,1,'C'),
    (0,0,0,0,0,2,1,0,0,2,0,0,0,1,1,0,'C'), (0,1,1,0,1,3,1,0,1,3,2,0,0,1,1,0,'C'),
    (0,0,0,0,1,2,1,0,1,2,3,0,0,1,0,0,'C'), (0,0,0,0,2,2,0,0,2,3,1,0,0,1,0,0,'C'),
    (0,0,0,0,0,1,3,1,0,1,2,1,0,0,1,1,'C'), (0,1,0,0,2,3,0,0,2,3,3,0,0,0,0,0,'C'),
    (0,0,0,0,0,3,2,0,0,3,2,0,0,0,0,0,'C'), (0,0,0,0,2,3,1,0,2,2,0,0,0,1,1,0,'C'),
    (0,0,0,0,0,2,2,0,0,2,3,0,0,2,1,0,'D'), (0,1,1,0,0,2,3,0,0,2,3,0,0,2,1,0,'D'),
    (0,2,1,0,0,2,3,0,0,2,3,0,0,2,1,0,'D'), (0,0,0,0,0,3,2,0,0,2,3,0,0,2,2,0,'D'),
    (0,2,0,0,2,1,2,0,0,3,3,0,0,1,1,0,'D'), (0,1,1,0,0,2,3,0,0,2,1,1,0,1,3,0,'D'),
    (0,1,1,0,0,2,3,0,0,2,1,1,0,1,3,0,'D'), (1,3,0,0,1,1,2,0,1,2,2,0,0,1,0,0,'D'),
    (0,1,0,0,2,3,3,0,1,1,3,0,0,3,2,0,'D'), (0,2,2,0,0,3,2,2,0,3,2,2,0,3,3,1,'D'),
    (0,1,0,0,0,3,3,0,0,2,2,0,0,1,1,0,'D'), (0,0,1,0,0,1,2,0,0,1,3,0,0,0,0,0,'D'),
    (0,0,0,0,0,3,0,0,1,1,1,0,0,2,1,0,'D'), (0,0,0,0,0,2,2,0,0,2,3,0,0,0,0,0,'D'),
    (3,0,0,0,0,3,2,0,0,2,2,0,0,0,0,0,'D'), (0,2,1,0,2,2,2,0,0,2,1,0,0,2,0,0,'D'),
    (0,1,1,0,0,2,3,0,0,3,2,0,0,1,0,0,'D'), (1,2,1,0,1,2,2,0,0,2,3,0,0,2,2,0,'D'),
    (0,0,1,0,0,2,3,0,0,2,3,0,0,1,0,0,'D'), (0,3,1,0,0,2,3,0,0,3,3,0,0,0,0,0,'D')
]
# === FINE NUOVO DATASET ===

X_train = np.array([item[:-1] for item in dataset]) 
y_train = np.array([item[-1] for item in dataset])   
modello = KNeighborsClassifier(n_neighbors=3)
modello.fit(X_train, y_train)
print("✅ Modello addestrato e pronto a ricevere richieste dal web.")


# 3. DEFINIAMO LE "ROTTE" (LE PAGINE DEL SITO)
# Questa funzione gestisce sia la visualizzazione della pagina sia l'invio dei dati
@app.route('/', methods=['GET', 'POST'])
def home():
    prediction_result = None
    input_data = ""
    error = None

    # Se l'utente ha inviato dei dati (cliccando il bottone)
    if request.method == 'POST':
        try:
            input_data = request.form['features'] # Prendiamo i dati dal form HTML
            # Trasformiamo la stringa "0,1,2,..." in una lista di numeri
            dati_numerici = [int(num) for num in input_data.split(',')]
            
            if len(dati_numerici) != 16:
                raise ValueError(f"Devi inserire esattamente 16 numeri, ne hai inseriti {len(dati_numerici)}.")

            # Prepariamo i dati per la predizione
            dati_per_predizione = np.array(dati_numerici).reshape(1, -1)
            # Facciamo la predizione!
            predizione = modello.predict(dati_per_predizione)
            prediction_result = predizione[0]

        except Exception as e:
            error = f"Errore: {e}. Assicurati di inserire 16 numeri separati da virgola."

    # Mostriamo la pagina HTML, passandole il risultato (se c'è)
    return render_template('index.html', prediction=prediction_result, submitted_data=input_data, error=error)


# 4. AVVIAMO IL SERVER
if __name__ == '__main__':
    # debug=True fa sì che il server si riavvii da solo quando modifichi il codice
    app.run(debug=True)
